#!/usr/bin/env ruby
require 'ipaddr'

IPV4_REGEXP = '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'

class IPAddr
  def to_cidr_s
    if @addr
      mask = @mask_addr.to_s(2).count('1')
      "#{to_s}/#{mask}"
    else
      nil
    end
  end
  # def whois_net
  #   resp = %x{whois -H #{to_s}}
  #   matches = resp.lines.grep(/(CIDR:|OrgName:|inetnum:|netname:)/)
  #   cleaned = matches.map{|l| l.strip.gsub(/ +/,' ')}
  #   puts "#{to_cidr_s}: #{cleaned}"
  # end
end

class IPAddrSet
  def initialize
    @members = []
  end
  def <<(ip)
    @members.each {|m| 
      return  if m.include? ip
    }
    @members << ip
  end
  def to_a
    @members.sort
  end
end

set = IPAddrSet.new
ips = ARGF.map do |l|
  l.strip!
  next if l.empty?
  begin
    ip = IPAddr.new l
    set << ip
  rescue
    STDERR.puts "Bad line: #{l.inspect}, #{$!}"
    next
  end
end

puts set.to_a.map(&:to_cidr_s)

# ip = ARGV[0]
# resp = %x{whois -H #{ip}}.lines
# # inetnum = resp.grep(/inetnum:\s+(#{IPV4_REGEXP})\s+-\s+(#{IPV4_REGEXP})/) 
# inetnum = resp.grep(/inetnum:/).first
# inetnum_match = /(#{IPV4_REGEXP}) - (#{IPV4_REGEXP})/.match(inetnum)
# puts "inetnum:#{inetnum_match.inspect}"
# range = IPAddr.new(inetnum_match[1]) & IPAddr.new(inetnum_match[2]).succ
# wat = range.~()
# puts "inetnum:#{range.to_cidr_s} #{wat.to_cidr_s}"

# matches = resp.grep(/(CIDR:|OrgName:|inetnum:|netname:)/)
# cleaned = matches.map{|l| l.strip.gsub(/ +/,' ')}
# puts "#{ip}: #{cleaned}"
